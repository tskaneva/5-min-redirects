name: Generate Folder Index and Deploy to Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Generate index.html and README.md
        run: |
          # Create a script to generate the HTML and README files
          cat > generate-index.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          // Get all directories in the root folder
          const getDirectories = () => {
            // We're running from the repository root
            return fs.readdirSync('.', { withFileTypes: true })
              .filter(dirent => dirent.isDirectory())
              .filter(dirent => !dirent.name.startsWith('.')) // Exclude hidden directories
              .filter(dirent => !['node_modules', '.git', '.github'].includes(dirent.name)) // Exclude common system folders
              .map(dirent => dirent.name)
              .sort();
          };
          
          // Check if a background image exists in the folder
          const getBackgroundImageForFolder = (folderName) => {
            // Try direct path to background.jpeg in the folder
            const backgroundPath = `${folderName}/background.jpeg`;
            console.log(`Checking for background image at: ${backgroundPath}`);
            if (fs.existsSync(backgroundPath)) {
              console.log(`Found background image at: ${backgroundPath}`);
              return backgroundPath;
            }
            
            // Use the default background from .github/img/background.jpeg
            const defaultBackgroundPath = '.github/img/background.jpeg';
            console.log(`Checking for default background at: ${defaultBackgroundPath}`);
            if (fs.existsSync(defaultBackgroundPath)) {
              console.log(`Found default background at: ${defaultBackgroundPath}`);
              return defaultBackgroundPath;
            }
            
            // If no images found, return a gray placeholder
            console.log('No background images found, using placeholder');
            return 'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22250%22%20height%3D%22150%22%20viewBox%3D%220%200%20250%20150%22%20preserveAspectRatio%3D%22none%22%3E%3Crect%20width%3D%22250%22%20height%3D%22150%22%20fill%3D%22%23777%22%3E%3C%2Frect%3E%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20fill%3D%22%23fff%22%20text-anchor%3D%22middle%22%20dominant-baseline%3D%22middle%22%20font-family%3D%22Arial%2C%20sans-serif%22%20font-size%3D%2220px%22%3E${folderName}%3C%2Ftext%3E%3C%2Fsvg%3E';
          };
          
          // Get folder names from config file in the root directory
          const getFolderNameBg = (folderName) => {
            // Try to load from subjects-name.json ONLY in the root
            const configPath = 'subjects-name.json';
            console.log(`Checking for subject names at: ${configPath}`);
            if (fs.existsSync(configPath)) {
              try {
                const namesConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));
                console.log(`Found subjects-names.json with keys: ${Object.keys(namesConfig).join(', ')}`);
                if (namesConfig[folderName]) {
                  console.log(`Found custom name for ${folderName}: ${namesConfig[folderName]}`);
                  return namesConfig[folderName];
                }
              } catch (error) {
                console.error('Error reading subjects names config:', error);
              }
            } else {
              console.log('subjects-names.json not found');
            }
            
            // If no name found in config, just return the folder name itself
            console.log(`Using default folder name: ${folderName}`);
            return folderName;
          };
          
          // Generate HTML
          const generateHTML = (directories) => {
            const html = `<!DOCTYPE html>
          <html lang="bg">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Tsvetelina Kaneva's 5 min exercises</title>
              <link rel="preconnect" href="https://fonts.googleapis.com">
              <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
              <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
              <link href="https://fonts.googleapis.com/css2?family=Raleway:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
              <style>
                  body {
                      font-family: 'Raleway', sans-serif;
                  }
                  #loading {
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      height: 100vh;
                      width: 100%;
                      position: fixed;
                      top: 0;
                      left: 0;
                      background-color: rgba(255, 255, 255, 0.9);
                      z-index: 1000;
                  }
                  
                  #access-denied {
                      display: none;
                      text-align: center;
                      height: 100vh;
                      width: 100%;
                      position: fixed;
                      top: 0;
                      left: 0;
                      background-color: rgba(255, 255, 255, 0.95);
                      z-index: 999;
                      padding-top: 20vh;
                  }
                  
                  .content {
                      opacity: 0;
                      transition: opacity 0.5s ease;
                  }
              </style>
          </head>
          <body>
              <div id="loading" class="bg-white">
                  <div class="text-center">
                      <p class="text-xl font-semibold mb-2">Verifying access...</p>
                      <div class="w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto"></div>
                  </div>
              </div>
              
              <div id="access-denied" class="bg-white">
                  <h2 class="text-3xl font-bold text-red-600 mb-4">Access Denied</h2>
                  <p class="text-xl mb-2">You are not authorized to view this website.</p>
                  <p id="visitor-ip" class="text-gray-600"></p>
              </div>
              
              <div class="content" id="main-content">
                  <h1 class="text-4xl text-center font-bold my-[40px]">Tsvetelina Kaneva's 5 min questions</h1>
                  
                  <div class="flex flex-wrap justify-center gap-4 p-4">
                      ${directories.map(dir => {
                        const bgImage = getBackgroundImageForFolder(dir);
                        const folderNameBg = getFolderNameBg(dir);
                        return `<a href="${dir}/" class="folder-link relative h-[150px] w-[250px] bg-cover bg-center text-white shadow-lg rounded-lg overflow-hidden" style="background-image: url('${bgImage}');">
                            <div class="absolute inset-0 bg-black/25 hover:bg-black/40 transition-all duration-300"></div>  
                            <span class="absolute bottom-2 left-0 w-full text-center text-lg font-medium">${folderNameBg}</span>
                          </a>`;
                      }).join('\n                      ')}
                  </div>
                  <footer class="text-center text-gray-500 mt-10 text-sm">
                      Auto-generated on ${new Date().getDate()}.${new Date().getMonth() + 1}.${new Date().getFullYear()}
                  </footer>
              </div>
              
              <script>
                  document.addEventListener('DOMContentLoaded', async function() {
                      // List of allowed IPs - replace with your actual allowed IPs
                      const allowedIPs = [
                          '123.456.789.101',
                          '234.567.890.123',
                          '345.678.901.234'
                          // Add more IPs as needed
                      ];
                      
                      try {
                          // Fetch the visitor's IP from an API
                          const response = await fetch('https://api.ipify.org?format=json');
                          const data = await response.json();
                          const visitorIP = data.ip;
                          
                          // Display visitor's IP
                          document.getElementById('visitor-ip').textContent = 'Your IP: ' + visitorIP;
                          
                          // Check if visitor's IP is allowed
                          if (allowedIPs.includes(visitorIP)) {
                              // Show content
                              document.getElementById('loading').style.display = 'none';
                              document.getElementById('main-content').style.opacity = '1';
                          } else {
                              // Show access denied
                              document.getElementById('loading').style.display = 'none';
                              document.getElementById('access-denied').style.display = 'block';
                          }
                      } catch (error) {
                          console.error('Error checking IP:', error);
                          
                          // Fallback: show content in case of error
                          document.getElementById('loading').style.display = 'none';
                          document.getElementById('main-content').style.opacity = '1';
                      }
                  });
              </script>
          </body>
          </html>`;
            
            fs.writeFileSync('index.html', html);
            console.log('index.html has been generated');
          };
          
          // Generate README.md with support for different case variations
          const generateReadme = (directories) => {
            const date = new Date();
            const formattedDate = date.getDate() + '.' + (date.getMonth() + 1) + '.' + date.getFullYear();
            
            // Check for different README filename variations
            const readmeVariations = ['README.md', 'readme.md', 'Readme.md'];
            let existingReadmePath = null;
            let existingContent = '';
            
            // Find if any README variation exists
            for (const readmeName of readmeVariations) {
              if (fs.existsSync(readmeName)) {
                existingReadmePath = readmeName;
                existingContent = fs.readFileSync(readmeName, 'utf8');
                console.log('Found existing README at: ' + readmeName);
                break;
              }
            }
            
            // Default output path - prefer existing one or fallback to README.md
            const outputPath = existingReadmePath || 'README.md';
            console.log('Will write to: ' + outputPath);
            
            // Prepare links content with domain prepended to URLs
            const folderLinks = directories.map(dir => '- [' + dir + '](https://5-mins.tskaneva.com/' + dir + '/)').join('\n');
            
            // If no README exists, create a new one
            if (!existingReadmePath) {
              console.log('No existing README found, creating new one');
              const markdown = '# Tsvetelina Kaneva\'s 5 min exercises\n\n' +
                               '## Links:\n\n' +
                               '<!-- [links] -->\n' +
                               folderLinks + '\n' +
                               '<!-- [/links] -->\n\n' +
                               '---\n\n' +
                               'Auto-generated on ' + formattedDate;
              
              fs.writeFileSync(outputPath, markdown);
              console.log('New ' + outputPath + ' has been generated');
              return;
            }
            
            // Check if the [links] tag exists
            const linksTagRegex = /<!-- \[links\] -->([\s\S]*?)<!-- \[\/links\] -->/;
            
            if (linksTagRegex.test(existingContent)) {
              console.log('Found [links] tag in README, updating content between tags');
              // Replace content between tags
              const updatedContent = existingContent.replace(
                linksTagRegex, 
                '<!-- [links] -->\n' + folderLinks + '\n<!-- [/links] -->'
              );
              fs.writeFileSync(outputPath, updatedContent);
            } else {
              console.log('No [links] tag found in README, appending to the end');
              // Add tags and links if they don't exist
              const updatedContent = existingContent + 
                                    '\n\n## Links:\n\n' +
                                    '<!-- [links] -->\n' + 
                                    folderLinks + 
                                    '\n<!-- [/links] -->\n\n---\n\n' +
                                    'Auto-generated on ' + formattedDate;
              fs.writeFileSync(outputPath, updatedContent);
            }
            
            console.log(outputPath + ' has been updated with folder links');
          };
          
          const directories = getDirectories();
          generateHTML(directories);
          generateReadme(directories);
          EOF
          
          # Execute the script
          node generate-index.js
          
      - name: Commit and push if changed
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          # Only add files that exist
          if [ -f "index.html" ]; then git add index.html; fi
          if [ -f "README.md" ]; then git add README.md; fi
          if [ -f "readme.md" ]; then git add readme.md; fi
          if [ -f "Readme.md" ]; then git add Readme.md; fi
          # Check if there are changes to commit
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update index.html and README files with folder listing")
          git push origin main
          
      # Pages deployment steps
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4